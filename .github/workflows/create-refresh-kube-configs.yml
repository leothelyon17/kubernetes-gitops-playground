name: Build and Store Kubernetes Config

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "The environment to generate the Kubernetes config for"
        required: true
        default: "lab"
        type: choice
        options:
          - lab
          - prod

jobs:
  generate-kubeconfig:
    runs-on: self-hosted

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Install required Python dependencies
      - name: Install dependencies
        run: |
          python3.12 -m venv venv
          . venv/bin/activate
          pip3.12 install pynacl jinja2-cli

      # Step 3: Render the Kubernetes config using Jinja2
      - name: Render Kubernetes Config
        run: |
          export ENV_NAME=${{ github.event.inputs.environment }}
          . venv/bin/activate
          jinja2 ./ansible/templates/kubeconfig-template.j2 -D environment=$ENV_NAME > kubeconfig.yaml

      # Step 4: Base64 encode the generated Kubernetes config
      - name: Base64 Encode Kubernetes Config
        id: encode
        run: |
          export KUBECONFIG_BASE64=$(base64 -w 0 kubeconfig.yaml)
          echo "KUBECONFIG_BASE64=$KUBECONFIG_BASE64" >> $GITHUB_ENV

      - name: Get Repo Public Key
        env:
            PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          response=$(curl \
            -X GET \
            -H "Authorization: Bearer $PAT_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/environments/${{ github.event.inputs.environment }}/secrets/public-key)
            echo "Public key API response: $response"
            public_key_id=$(echo "$response" | jq -r '.key_id')
            public_key=$(echo "$response" | jq -r '.key')
            echo "key_id=$key_id" >> $GITHUB_ENV
            echo "key_id=$key_id" # Optional debug output

      # Step 4: Encrypt the secret
      - name: Encrypt the secret
        id: encrypt-secret
        run: |
          . venv/bin/activate
          encrypted=$(python3.12 scripts/encrypt_secret.py "$public_key" "$KUBECONFIG_BASE64")
          echo "encrypted_secret=$encrypted" >> $GITHUB_ENV

      # Step 5: Store the Base64 encoded config as a GitHub secret (requires admin token)
      - name: Store Kubernetes Config as Secret
        env:
            PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          curl \
            -X PUT \
            -H "Authorization: Bearer $PAT_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/environments/${{ github.event.inputs.environment }}/secrets/KUBECONFIG_BASE64 \
                -d '{"encrypted_value": "'"$encrypted_secret"'",
                    "key_id":"'"$public_key_id"'"}'

