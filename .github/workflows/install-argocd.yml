name: Install ArgoCD and CLI

on:
  workflow_dispatch:
    inputs:
        environment:
          description: "The environment to deploy to"
          required: true
          default: "lab"
          type: choice
          options:
            - lab
            - prod

env:
  ARGOCD_PORT: ${{ vars.ARGOCD_PORT }}
  ARGOCD_SERVER: ${{ vars.ARGOCD_SERVER }}
  ARGOCD_USERNAME: ${{ secrets.ARGOCD_ADMIN_USER }}
  ADMIN_USERNAME: ${{ secrets.ARGOCD_MY_ADMIN_USER }}
  ADMIN_PASSWORD: ${{ secrets.ARGOCD_MY_ADMIN_PASSWORD }}

jobs:
  
  install-argocd:
    #needs: set-environment
    environment: ${{ github.event.inputs.environment }}
    runs-on: self-hosted

    steps:
    # Checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set Environment Name Variable Dynamically
      id: set-environment-variable
      run: echo "ENV_NAME=${{ github.event.inputs.environment }}" >> $GITHUB_ENV

    # Set Correct Kubernetes Context
    - name: Set Correct Kubernetes Context
      run: |
        kubectl config use-context "${{ env.ENV_NAME }}-kubernetes-admin@${{ env.ENV_NAME }}-cluster.jjland.local"

    # Install required Python dependencies
    - name: Install dependencies
      run: |
        python3.12 -m venv venv
        . venv/bin/activate
        pip3.12 install pynacl
    
    # Install Argo CD
    - name: Install Argo CD on Kubernetes
      run: |
        kubectl create namespace argocd || true
        kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

    # Install Argo CD CLI
    - name: Install Argo CD CLI
      run: |
        sudo rm -rf argocd
        curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
        chmod +x argocd
        sudo mv argocd /usr/local/bin/

    # Wait for Argo CD Server to be Ready
    - name: Wait for Argo CD components
      run: |
        kubectl wait --for=condition=available --timeout=300s deployment/argocd-server -n argocd

    # Expose Argo CD Server (Optional)
    - name: Expose Argo CD Server
      run: |
        kubectl patch svc argocd-server -n argocd \
          -p '{"spec": {"type": "NodePort", "ports": [{"port": 443, "targetPort": 8080, "nodePort": '"$ARGOCD_PORT"' }]}}'

    # Grab ArgoCD admin password and set as variable
    - name: Get/Set ArgoCD admin password
      id: encode
      run: |
        export ARGO_ADMIN_PW=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
        echo "::add-mask::$ARGO_ADMIN_PW"
        echo "ARGO_ADMIN_PW=$ARGO_ADMIN_PW" >> $GITHUB_ENV

    - name: Get Repo Public Key
      env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
      run: |
        response=$(curl \
          -X GET \
          -H "Authorization: Bearer $PAT_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/environments/${{ github.event.inputs.environment }}/secrets/public-key)
          echo "Public key API response: $response"
          public_key_id=$(echo "$response" | jq -r '.key_id')
          public_key=$(echo "$response" | jq -r '.key')
          echo "public_key_id=$public_key_id" >> $GITHUB_ENV
          echo "public_key=$public_key" >> $GITHUB_ENV

    # Encrypt the secret
    - name: Encrypt the secret
      id: encrypt-secret
      run: |
        . venv/bin/activate
        encrypted=$(python3.12 scripts/encrypt-secret.py "$public_key" "$ARGO_ADMIN_PW")
        echo "::add-mask::$encrypted"
        echo "encrypted_secret=$encrypted" >> $GITHUB_ENV

    # Store the encoded secret as a GitHub secret (requires admin token)
    - name: Store ArgoCD password as Github Secret
      env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
      run: |
        curl \
          -X PUT \
          -H "Authorization: Bearer $PAT_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/environments/${{ github.event.inputs.environment }}/secrets/ARGOCD_ADMIN_PASSWORD \
              -d '{"encrypted_value": "'"$encrypted_secret"'",
                  "key_id":"'"$public_key_id"'"}'

    - name: Sleep for 3 seconds
      run: sleep 3
    
    # Log in to ArgoCD
    - name: Login to ArgoCD
      env:
        ARGOCD_PASSWORD: ${{ secrets.ARGOCD_ADMIN_PASSWORD }}
      run: |
        argocd login $ARGOCD_SERVER:$ARGOCD_PORT \
          --username $ARGOCD_USERNAME \
          --password $ARGOCD_PASSWORD \
          --insecure
    
    # Create Additional Admin User ConfigMap
    - name: Create Admin User ConfigMap
      run: |
        kubectl get configmap argocd-cm -n argocd -o yaml > argocd-cm.yaml

        # Add new admin user for login
        echo "
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: argocd-cm
          namespace: argocd
          labels:
            app.kubernetes.io/name: argocd-cm
            app.kubernetes.io/part-of: argocd
        data:
          accounts.$ADMIN_USERNAME: login
        " > argocd-cm.yaml

        # Apply configmap
        kubectl -n argocd apply -f argocd-cm.yaml

    # Create Additional Admin User RBAC
    - name: Create Admin User RBAC
      run: |
        kubectl -n argocd get configmap argocd-rbac-cm -o yaml > rbac-config.yaml

        # Add new admin user and role
        echo "
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: argocd-rbac-cm
          namespace: argocd
          labels:
            app.kubernetes.io/name: argocd-rbac-cm
            app.kubernetes.io/part-of: argocd
        data:
          policy.csv: |
            p, role:admin, applications, *, *, allow
            g, $ADMIN_USERNAME, role:admin
        " > rbac-config.yaml

        # Apply RBAC configmap
        kubectl -n argocd apply -f rbac-config.yaml

        # Add the admin user
        argocd context
        argocd --server $ARGOCD_SERVER:$ARGOCD_PORT account update-password --account $ADMIN_USERNAME --current-password ${{ secrets.ARGOCD_ADMIN_PASSWORD }} --new-password $ADMIN_PASSWORD

        echo "Admin user $ADMIN_USERNAME created successfully."

    # Verify Admin User Creation
    - name: Verify Admin User
      run: |
        echo "Attempting to log in with the new admin user..."
        argocd login $ARGOCD_SERVER:$ARGOCD_PORT \
          --username ${{ secrets.ARGOCD_MY_ADMIN_USER }} \
          --password ${{ secrets.ARGOCD_MY_ADMIN_PASSWORD }} \
          --insecure
        echo "New admin user login successful."

    # Add the cluster to ArgoCD if not exists
    - name: Add Cluster to ArgoCD
      run: |
        CLUSTER_NAME=$ENV_NAME-cluster
        CONTEXT=$(kubectl config current-context)
        EXISTS=$(argocd --server $ARGOCD_SERVER:$ARGOCD_PORT cluster get $CLUSTER_NAME || echo "not found")
        if [[ "$EXISTS" == "not found" ]]; then
          echo "Cluster $CLUSTER_NAME not found. Adding it..."
          argocd --server $ARGOCD_SERVER:$ARGOCD_PORT cluster add $CONTEXT --name $CLUSTER_NAME --yes
        else
          echo "Cluster $CLUSTER_NAME already exists."
        fi
        #--server $ARGOCD_SERVER:$ARGOCD_PORT
