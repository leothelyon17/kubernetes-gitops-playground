name: Install ArgoCD and CLI

on:
  # push:
  #   branches:
  #     - main
  workflow_dispatch:

jobs:
  install-argocd:
    runs-on: self-hosted

    steps:
    # Step 1: Checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v3

    # Install Argo CD
    - name: Install Argo CD on Kubernetes
      run: |
        kubectl create namespace argocd || true
        kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

    # Install Argo CD CLI
    - name: Install Argo CD CLI
      run: |
        sudo rm -rf argocd
        curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
        chmod +x argocd
        sudo mv argocd /usr/local/bin/

    # Wait for Argo CD Server to be Ready
    - name: Wait for Argo CD components
      run: |
        kubectl wait --for=condition=available --timeout=300s deployment/argocd-server -n argocd

    # Expose Argo CD Server (Optional)
    - name: Expose Argo CD Server
      run: |
        kubectl patch svc argocd-server -n argocd \
          -p '{"spec": {"type": "NodePort", "ports": [{"port": 443, "targetPort": 8080, "nodePort": ${{ vars.ARGOCD_PORT_LAB }} }]}}'

    # Log in to ArgoCD
    - name: Login to ArgoCD
      env:
        ARGOCD_SERVER: ${{ vars.ARGOCD_URL_LAB }}
        ARGOCD_USERNAME: ${{ secrets.ARGOCD_ADMIN_USER }}
        ARGOCD_PASSWORD: ${{ secrets.ARGOCD_ADMIN_PASSWORD_LAB }}
      run: |
        argocd login $ARGOCD_SERVER \
          --username $ARGOCD_USERNAME \
          --password $ARGOCD_PASSWORD \
          --insecure

    # Create Additional Admin User ConfigMap
    - name: Create Admin User ConfigMap
      env:
        ARGOCD_SERVER: ${{ vars.ARGOCD_URL_LAB }}
        ADMIN_USERNAME: ${{ secrets.ARGOCD_MY_ADMIN_USER }}
        ADMIN_PASSWORD: ${{ secrets.ARGOCD_MY_ADMIN_PASSWORD }}
      run: |
        kubectl get configmap argocd-cm -n argocd -o yaml > argocd-cm.yaml

        # Add new admin user for login
        echo "
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: argocd-cm
          namespace: argocd
          labels:
            app.kubernetes.io/name: argocd-cm
            app.kubernetes.io/part-of: argocd
        data:
          accounts.$ADMIN_USERNAME: login
        " > argocd-cm.yaml

        # Apply configmap
        kubectl -n argocd apply -f argocd-cm.yaml

    # Create Additional Admin User RBAC
    - name: Create Admin User RBAC
      env:
        ARGOCD_SERVER: ${{ vars.ARGOCD_URL_LAB }}
        ADMIN_USERNAME: ${{ secrets.ARGOCD_MY_ADMIN_USER }}
        ADMIN_PASSWORD: ${{ secrets.ARGOCD_MY_ADMIN_PASSWORD }}
      run: |
        kubectl -n argocd get configmap argocd-rbac-cm -o yaml > rbac-config.yaml

        # Add new admin user and role
        echo "
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: argocd-rbac-cm
          namespace: argocd
          labels:
            app.kubernetes.io/name: argocd-rbac-cm
            app.kubernetes.io/part-of: argocd
        data:
          policy.csv: |
            p, role:admin, applications, *, *, allow
            g, $ADMIN_USERNAME, role:admin
        " > rbac-config.yaml

        # Apply RBAC configmap
        kubectl -n argocd apply -f rbac-config.yaml

        # Add the admin user
        argocd account update-password --account $ADMIN_USERNAME --current-password ${{ secrets.ARGOCD_ADMIN_PASSWORD_LAB }} --new-password $ADMIN_PASSWORD

        echo "Admin user $ADMIN_USERNAME created successfully."

    # Verify Admin User Creation
    - name: Verify Admin User
      run: |
        echo "Attempting to log in with the new admin user..."
        argocd login ${{ vars.ARGOCD_URL_LAB }} \
          --username ${{ secrets.ARGOCD_MY_ADMIN_USER }} \
          --password ${{ secrets.ARGOCD_MY_ADMIN_PASSWORD }} \
          --insecure
        echo "New admin user login successful."

    # Add the cluster to ArgoCD if not exists
    - name: Add Cluster to ArgoCD
      env:
        KUBECONFIG: ${{ secrets.KUBECONFIG_BASE64_LAB }}
      run: |
        CLUSTER_NAME=lab-cluster
        CONTEXT=$(kubectl config current-context)
        EXISTS=$(argocd cluster get $CLUSTER_NAME || echo "not found")
        if [[ "$EXISTS" == "not found" ]]; then
          echo "Cluster $CLUSTER_NAME not found. Adding it..."
          echo $KUBECONFIG | base64 --decode > kubeconfig.yaml
          argocd cluster add $CONTEXT --name $CLUSTER_NAME --kubeconfig kubeconfig.yaml
        else
          echo "Cluster $CLUSTER_NAME already exists."
        fi
